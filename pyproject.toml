[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "geometer"
description = "Python geometry package based on projective geometry and numpy."
readme = "README.md"
keywords = [ "geometry", "mathematics", "numpy", "projective geometry" ]
license = "MIT"
authors = [
    { name = "Jan MÃ¼ller", email = "" },
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = [ "version" ]
dependencies = [
    "numpy>=2.0",
    "typing-extensions>=4.6.1,<5.0.0",
]

urls.Changelog = "https://github.com/jan-mue/geometer/releases"
urls.Documentation = "https://github.com/jan-mue/geometer#readme"
urls.Issues = "https://github.com/jan-mue/geometer/issues"
urls.Source = "https://github.com/jan-mue/geometer"

[dependency-groups]
dev = [
    "coverage==7.10.7",
    "mypy==1.18.2",
    "pytest==8.4.2",
]
docs = [
    "sphinx==7.4.7; python_version<'3.10'",
    "sphinx==8.1.3; python_version=='3.10.*'",
    "sphinx==8.2.3; python_version>='3.11'",
    "sphinx-rtd-theme==3.0.2",
]

[tool.hatch.build]
packages = [ "geometer" ]

[tool.hatch.version]
path = "geometer/version.py"

[tool.ruff]
target-version = "py39"
line-length = 120
exclude = [
    "docs",
]

lint.select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle errors
    "ERA",  # no commented-out code
    "F",    # pyflakes
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "NPY",  # numpy-specific rules
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "RUF",  # ruff-specific rules
    "S101", # don't use assert
    "SIM",  # flake8-simplify
    "TC",   # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
]
lint.ignore = [
    "B008",    # function call in argument defaults, required for default points
    "D100",    # Missing docstring in public module
    "D101",    # TODO: fix
    "D102",    # TODO: fix
    "D103",    # TODO: fix
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in `__init__`
    "D417",    # TODO: fix
    "E501",    # line too long, handled by black
    "E741",    # ambiguous variable name, TODO: fix
    "PLC0105", # type var naming according to variance
    "PLR0124", # name compared with itself, required to check custom __eq__
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic values
    "PLR5501", # use `elif` instead of `else` then `if`, to reduce indentation
    "PLW1641", # Object does not implement `__hash__` method, numpy arrays are not hashable
    "PLW2901", # for loop variable overwritten
    "RUF059",  # Unpacked variable is never used
    "TC006",   # Add quotes to type expression in `typing.cast()`
]
lint.per-file-ignores."__init__.py" = [ "F401" ]
lint.per-file-ignores."tests/**" = [ "D", "S101" ]
lint.unfixable = [  ]
lint.flake8-tidy-imports.ban-relative-imports = "all"
lint.isort.known-first-party = [ "geometer" ]
lint.pydocstyle.convention = "google"

[tool.codespell]
ignore-words-list = "nin"

[tool.pyproject-fmt]
indent = 4
column_width = 120
keep_full_version = true

[tool.coverage.report]
exclude_also = [
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "@(typing(_extensions)?\\.)?overload",
]

[tool.mypy]
plugins = [ "numpy.typing.mypy_plugin" ]
strict = true
implicit_reexport = true
disallow_any_generics = false # TODO
warn_return_any = false # TODO
enable_error_code = [
    "explicit-override",
    "ignore-without-code",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unimported-reveal",
    "unused-awaitable",
    "unused-ignore",
]
disable_error_code = [
    "override",
]

[[tool.mypy.overrides]]
module = "geometer.utils.indexing"
ignore_errors = true
ignore_missing_imports = true
