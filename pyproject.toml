[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "geometer"
dynamic = ["version"]
description = "Python geometry package based on projective geometry and numpy."
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["geometry", "numpy", "mathematics", "projective geometry"]
authors = [
    { name = "Jan MÃ¼ller", email = "" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "numpy>=1.22,<2.0"
]

[dependency-groups]
dev = [
    "pytest==8.3.5",
    "mypy==1.15.0",
    "coverage==7.8.2",
]
docs = [
    "sphinx==8.2.3; python_version >= '3.11'",
    "sphinx==8.1.3; python_version == '3.10.*'",
    "sphinx==7.4.7; python_version < '3.10'",
    "sphinx-rtd-theme==3.0.2"
]

[project.urls]
Documentation = "https://github.com/jan-mue/geometer#readme"
Issues = "https://github.com/jan-mue/geometer/issues"
Source = "https://github.com/jan-mue/geometer"
Changelog = "https://github.com/jan-mue/geometer/releases"

[tool.hatch.version]
path = "geometer/__version__.py"

[tool.black]
target-version = ["py39", "py310", "py311", "py312"]
line-length = 120

[tool.ruff]
target-version = "py39"
line-length = 120
exclude = [
    "docs"
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C4", # flake8-comprehensions
    "B", # flake8-bugbear
    "UP", # pyupgrade
    "TID", # flake8-tidy-imports
    "NPY", # numpy-specific rules
    "PERF", # perflint
    "ARG", # flake8-unused-arguments
    "BLE", # flake8-blind-except
    "PT", # flake8-pytest-style
    "PL", # pylint
    "RUF", # ruff-specific rules
    "D", # pydocstyle
]
ignore = [
    "E501", # line too long, handled by black
    "E741", # ambiguous variable name, TODO: fix
    "B008", # function call in argument defaults, required for default points
    "PLR0912", # too many branches
    "PLR0913", # too many arguments to function call
    "PLR0911", # too many return statements
    "PLR0915", # too many statements
    "PLR2004", # magic values
    "PLW2901", # for loop variable overwritten
    "PLR5501", # use `elif` instead of `else` then `if`, to reduce indentation
    "PLR0124", # name compared with itself, required to check custom __eq__
    "PLC0105", # type var naming according to variance
    "D100", # Missing docstring in public module
    "D101", # TODO: fix
    "D102", # TODO: fix
    "D103", # TODO: fix
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "D417", # TODO: fix
]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["D"]

[tool.ruff.lint.isort]
known-first-party = ["geometer"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]
strict = true
implicit_reexport = true
disallow_any_generics = false # TODO
warn_return_any = false # TODO

[[tool.mypy.overrides]]
module = "geometer.utils.indexing"
ignore_errors = true
ignore_missing_imports = true

[tool.coverage.report]
exclude_also = [
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "@(typing(_extensions)?\\.)?overload",
]

[tool.codespell]
ignore-words-list = "nin"
